SQL Injection is a security vulnerability that occurs when an attacker manipulates a web application's SQL queries by inserting malicious SQL code through user input fields. This allows the attacker to execute arbitrary SQL commands, potentially gaining unauthorized access to the database, retrieving sensitive information, or even modifying or deleting data. To mitigate this vulnerability in the bank application, I modified the `create_search_query` function in the `sql_injection` file. Specifically, I ensured that user input, such as the `search_term`, was safely integrated into the SQL query using parameterized queries (also known as prepared statements). By using placeholders (`?`) in the query and passing the actual values as parameters (e.g., `account_id` and `search_term`), I prevented direct manipulation of the SQL query, thus protecting the application from SQL injection attacks.